<style>
    table {
        border-collapse: collapse;
        margin-bottom: 20px;
        margin-right: 30px;
    }

    table, th, td {
        border: 1px solid black;
        padding: 5px;
        text-align: center;
    }

    .container {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 20px;
    }

    .container select {
        margin-right: 10px;
    }

    .buttons {
        margin-right: 20px;
        margin-bottom: 10px;
    }

    td {
        width: 35px; 
        height: 35px; 
    }

    .container-chk {
        display: flex;
        padding-right: 10px; 
        margin-bottom: 10px;
    }
    .container-chk input[type="checkbox"] {
        margin-right: 300px; 
    }
</style>

<div class="container">
    <table id="table1" contenteditable="true">
        <!-- Таблиця 1 - Заповнюється користувачем -->
        <tr>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
        </tr>
        <tr>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
        </tr>
        <tr>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
        </tr>
        <tr>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
        </tr>
        <tr>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
        </tr>
    </table>

    <table id="table2" contenteditable="true">
        <!-- Таблиця 2 - Заповнюється користувачем -->
        <tr>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
        </tr>
        <tr>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
        </tr>
        <tr>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
        </tr>
        <tr>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
        </tr>
        <tr>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
        </tr>
    </table>

    <table id="table3" contenteditable="true">
        <!-- Таблиця 3 - Заповнюється користувачем -->
        <tr>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
        </tr>
        <tr>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
        </tr>
        <tr>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
        </tr>
        <tr>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
        </tr>
        <tr>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
        </tr>
    </table>

    <table id="table4" style="background-color:rgb(229, 255, 216)">
        <!-- Таблиця 4 - Для відображення результатів -->
        <tr>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
        </tr>
        <tr>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
        </tr>
        <tr>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
        </tr>
        <tr>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
        </tr>
        <tr>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
        </tr>
    </table>
</div>

<div class="container-chk">
    <input type="checkbox" id="checkbox1">
    <input type="checkbox" id="checkbox2">
    <input type="checkbox" id="checkbox3">
</div>

<div class="buttons">
    <button id="fillButton">Порожня</button>
    <button id="oneButton">Одинична</button>
    <button id="randomButton">Випадкова</button>
    <button id="diagonalButton">Діагональна</button>
    <button id="antiDiagonalButton">Антидіагональна</button>
    <button id="variantButton">По варіанту</button>
</div>

<div class="container">
    <div class="checkbox-container">
        <select id="selectTable1">
            <option value="table1">Таблиця 1</option>
            <option value="table2">Таблиця 2</option>
            <option value="table3">Таблиця 3</option>
        </select>
    </div>

    <div class="checkbox-container">
        <select id="selectTable2">
            <option value="table1">Таблиця 1</option>
            <option value="table2">Таблиця 2</option>
            <option value="table3">Таблиця 3</option>
        </select>
    </div>
</div>

<div class="container">
    <div class="checkbox-container">
        <select id="selectAction">
            <option value="union">Об'єднати</option>
            <option value="intersect">Перетин</option>
            <option value="difference">Різниця</option>
            <option value="symmetricDifference">Симетрична різниця</option>
            <option value="complement">Доповнення</option>
            <option value="inverse">Обернене відношення</option>
            <option value="compose">Композиція</option>
            <option value="restrict">Звуження</option>
            <option value="checkReflexive">Перевірити рефлексивність</option>
            <option value="checkAntiReflexive">Перевірити антирефлексивність</option>
            <option value="checkSymmetric">Перевірити симетричність</option>
            <option value="checkAsymmetric">Перевірити асиметричність</option>
            <option value="checkAntisymmetric">Перевірити антисиметричність</option>
            <option value="checkTransitive">Перевірити транзитивнісит</option>
            <option value="TransitiveClosure">Перевірити транзитивне замикання</option>
            <option value="checkAcyclic">Перевірити циклічність</option>
            <option value="checkConnected">Перевірити зв'язність</option>
            <option value="checkTolerant">Перевірити толерантність</option>
            <option value="checkEquivalence">Перевірити еквівалентність</option>
            <option value="checkQuasiOrder">Перевірити квазіпорядок</option>
            <option value="checkOrder">Перевірити порядкок</option>
            <option value="computeReachability">Перевіряти доступність</option>
            <option value="MutualReachability">перевірити мучуал</option>
            <option value="SymmetricComponent">симетричний компонент</option>
            <option value="AsymmetricComponent">асим компонент</option>

        </select>
    </div>

    <div class="buttons">
        <button onclick="performAction()">Застосувати</button>
    </div>
</div>

<div class="container">
    <label for="matrixSize">Розмір матриці:</label>
    <input type="number" id="matrixSize" min="1" value="5">
    <button onclick="resizeTables()">Змінити розмір</button>
</div>

<script>
    function resizeTables() {
        var newSize = parseInt(document.getElementById("matrixSize").value);

        resizeTable("table1", newSize, newSize);
        resizeTable("table2", newSize, newSize);
        resizeTable("table3", newSize, newSize);
        resizeTable("table4", newSize, newSize);
    }

    function resizeTable(tableId, rows, cols) {
        var table = document.getElementById(tableId);

        table.innerHTML = '';

        for (var i = 0; i < rows; i++) {
            var newRow = table.insertRow();
            for (var j = 0; j < cols; j++) {
                var newCell = newRow.insertCell();
                newCell.innerText = "0";
            }
        }
    }

    function fillEmpty(tableId) {
        var table = document.getElementById(tableId);
        var rows = table.rows;

        for (var i = 0; i < rows.length; i++) {
            var cells = rows[i].cells;
            for (var j = 0; j < cells.length; j++) {
                cells[j].innerText = "0";
            }
        }
    }

    function fillOnes(tableId) {
        var table = document.getElementById(tableId);
        var rows = table.rows;

        for (var i = 0; i < rows.length; i++) {
            var cells = rows[i].cells;
            for (var j = 0; j < cells.length; j++) {
                cells[j].innerText = "1";
            }
        }
    }

    function fillRandom(tableId) {
        var table = document.getElementById(tableId);
        var rows = table.rows;

        for (var i = 0; i < rows.length; i++) {
            var cells = rows[i].cells;
            for (var j = 0; j < cells.length; j++) {
                cells[j].innerText = Math.round(Math.random());
            }
        }
    }

    function fillDiagonal(tableId) {
        var table = document.getElementById(tableId);
        var rows = table.rows;

        for (var i = 0; i < rows.length; i++) {
            var cells = rows[i].cells;
            for (var j = 0; j < cells.length; j++) {
                if (i === j) {
                    cells[j].innerText = "1";
                } else {
                    cells[j].innerText = "0";
                }
            }
        }
    }

    function fillAntiDiagonal(tableId) {
        var table = document.getElementById(tableId);
        var rows = table.rows;
        var cols = rows[0].cells.length;

        for (var i = 0; i < rows.length; i++) {
            var cells = rows[i].cells;
            for (var j = 0; j < cells.length; j++) {
                if (i === j) {
                    cells[j].innerText = "0";
                } else {
                    cells[j].innerText = "1";
                }
            }
        }
    }

    function fillVariant() {
    var table1Values = [
        [1, 1, 0, 0, 1],
        [1, 1, 0, 0, 1],
        [0, 0, 1, 1, 0],
        [0, 0, 1, 1, 0],
        [1, 1, 0, 0, 1]
    ];

    var table2Values = [
        [0, 0, 0, 0, 0],
        [0, 1, 0, 1, 0],
        [0, 1, 0, 1, 1],
        [0, 0, 0, 0, 0],
        [1, 0, 1, 0, 1]
    ];

    var table3Values = [
        [0, 1, 0, 0, 0],
        [0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0],
        [0, 0, 0, 0, 1],
        [0, 1, 0, 0, 0]
    ];

    var table1 = document.getElementById("table1");
    var table2 = document.getElementById("table2");
    var table3 = document.getElementById("table3");

   
    for (var i = 0; i < table1Values.length; i++) {
        var newRow = table1.rows[i];
        for (var j = 0; j < table1Values[i].length; j++) {
            var newCell = newRow.cells[j];
            newCell.innerText = table1Values[i][j];
        }
    }
    for (var i = 0; i < table2Values.length; i++) {
        var newRow = table2.rows[i];
        for (var j = 0; j < table2Values[i].length; j++) {
            var newCell = newRow.cells[j];
            newCell.innerText = table2Values[i][j];
        }
    }
    for (var i = 0; i < table3Values.length; i++) {
        var newRow = table3.rows[i];
        for (var j = 0; j < table3Values[i].length; j++) {
            var newCell = newRow.cells[j];
            newCell.innerText = table3Values[i][j];
        }
    }
}

    function performAction() {
        var selectedAction = document.getElementById("selectAction").value;
        var selectedTable1 = document.getElementById("selectTable1").value;
        var selectedTable2 = document.getElementById("selectTable2").value;

        switch (selectedAction) {
            case "union":
                unionTables(selectedTable1, selectedTable2);
                break;
            case "intersect":
                intersectTables(selectedTable1, selectedTable2);
                break;
            case "difference":
                differenceTables(selectedTable1, selectedTable2);
                break;
            case "symmetricDifference":
                symmetricDifferenceTables(selectedTable1, selectedTable2);
                break;
            case "complement":
                complementTables(selectedTable1, selectedTable2);
                break;
            case "inverse":
                inverseTables(selectedTable1,selectedTable2);
                break;
            case "compose":
                composeTables(selectedTable1, selectedTable2);
                break;
            case "restrict":
                restrictTables(selectedTable1);
                break;
            case "checkReflexive":
                checkReflexive(selectedTable1);
                break;
            case "checkAntiReflexive":
                checkAntiReflexive(selectedTable1);
                break;
            case "checkSymmetric":
                checkSymmetric(selectedTable1);
                break;
            case "checkAsymmetric":
                checkAsymmetric(selectedTable1);
                break;
            case "checkAntisymmetric":
                checkAntisymmetric(selectedTable1);
                break;
            case "checkTransitive":
                checkTransitive(selectedTable1);
                break;
            case "TransitiveClosure":
                TransitiveClosure(selectedTable1);
                break;
            case "checkAcyclic":
                checkAcyclic(selectedTable1);
                break;
            case "checkConnected":
                checkConnected(selectedTable1);
                break;
            case "checkTolerant":
                checkTolerant(selectedTable1);
                break;
            case "checkEquivalence":
                checkEquivalence(selectedTable1);
                break;
            case "checkQuasiOrder":
                checkQuasiOrder(selectedTable1);
                break;
            case "checkOrder":
                checkOrder(selectedTable1);
                break;
            case "computeReachability":
                computeReachability(selectedTable1);
                break;
            case "MutualReachability":
                MutualReachability(selectedTable1);
                break;
            case "SymmetricComponent":
                SymmetricComponent(selectedTable1);
                break;
            case "AsymmetricComponent":
                AsymmetricComponent(selectedTable1);
                break;
        }
    }

    
    
   //ОБ'ЄДНАННЯ 
    function unionTables(tableId1, tableId2) {
    var table1 = document.getElementById(tableId1);
    var table2 = document.getElementById(tableId2);
    var table4 = document.getElementById("table4");

    var result = calculateUnion(table1, table2);
    fillTableFromResult(table4, result);
}

function calculateUnion(table1, table2) {
    var rows1 = table1.rows;
    var rows2 = table2.rows;

    var result = [];

    for (var i = 0; i < rows1.length; i++) {
        var cells1 = rows1[i].cells;
        var cells2 = rows2[i].cells;

        var newRow = [];
        for (var j = 0; j < cells1.length; j++) {
            var value1 = parseInt(cells1[j].innerText);
            var value2 = parseInt(cells2[j].innerText);

            newRow.push(value1 || value2);
        }
        result.push(newRow);
    }

    return result;
}

// ПЕРЕТИН
function intersectTables(tableId1, tableId2) {
    var table1 = document.getElementById(tableId1);
    var table2 = document.getElementById(tableId2);
    var table4 = document.getElementById("table4");

    var result = calculateIntersection(table1, table2);
    fillTableFromResult(table4, result);
}

function calculateIntersection(table1, table2) {
    var rows1 = table1.rows;
    var rows2 = table2.rows;

    var result = [];

    for (var i = 0; i < rows1.length; i++) {
        var cells1 = rows1[i].cells;
        var cells2 = rows2[i].cells;

        var newRow = [];
        for (var j = 0; j < cells1.length; j++) {
            var value1 = parseInt(cells1[j].innerText);
            var value2 = parseInt(cells2[j].innerText);

            newRow.push(value1 && value2);
        }
        result.push(newRow);
    }

    return result;
}



//РІЗНИЦЯ
function differenceTables(tableId1, tableId2) {
    var table1 = document.getElementById(tableId1);
    var table2 = document.getElementById(tableId2);
    var table4 = document.getElementById("table4");

    var result = calculateDifference(table1, table2);
    fillTableFromResult(table4, result);
}

function calculateDifference(table1, table2) {
    var rows1 = table1.rows;
    var rows2 = table2.rows;

    var result = [];

    for (var i = 0; i < rows1.length; i++) {
        var cells1 = rows1[i].cells;
        var cells2 = rows2[i].cells;

        var newRow = [];
        for (var j = 0; j < cells1.length; j++) {
            var value1 = parseInt(cells1[j].innerText);
            var value2 = parseInt(cells2[j].innerText);

            newRow.push(value1 && !value2 ? 1 : 0);
        }
        result.push(newRow);
    }

    return result;
}

//  СИМЕТРИЧНА РІЗНИЦЯ
function symmetricDifferenceTables(tableId1, tableId2) {
    var table1 = document.getElementById(tableId1);
    var table2 = document.getElementById(tableId2);
    var table4 = document.getElementById("table4");

    var result = calculateSymmetricDifference(table1, table2);
    fillTableFromResult(table4, result);
}

function calculateSymmetricDifference(table1, table2) {
    var diff1 = calculateDifference(table1, table2);
    var diff2 = calculateDifference(table2, table1);

    var result = [];

    for (var i = 0; i < diff1.length; i++) {
        var newRow = [];
        for (var j = 0; j < diff1[i].length; j++) {
            var diff1Value = diff1[i][j];
            var diff2Value = diff2[i][j];

            newRow.push((!diff1Value && diff2Value) || (diff1Value && !diff2Value) ? 1 : 0);
        }
        result.push(newRow);
    }

    return result;
}

// ДОПОВНЕННЯ
function complementTables(tableId1, tableId2) {
    var table1 = document.getElementById(tableId1);
    var table2 = document.getElementById(tableId2);
    var table4 = document.getElementById("table4");

    var result = calculateComplement(table1, table2);
    fillTableFromResult(table4, result);
}

function calculateComplement(table1, table2) {
    var rows1 = table1.rows;
    var result = [];

    for (var i = 0; i < rows1.length; i++) {
        var newRow = [];
        for (var j = 0; j < rows1[i].cells.length; j++) {
            var cellValue = parseInt(rows1[i].cells[j].innerText);
            newRow.push(cellValue === 1 ? 0 : 1);
        }
        result.push(newRow);
    }

    return result;
}




// ОБЕРНЕНЕ ВІДНОШЕННЯ
function inverseTables(tableId1,tableId2) {
    var table1 = document.getElementById(tableId1);
    var table4 = document.getElementById("table4");

    var result = calculateInverse(table1);
    fillTableFromResult(table4, result);
}

function calculateInverse(table1) {
    var rows1 = table1.rows;
    var cols1 = rows1[0].cells.length;
    var result = [];

    for (var i = 0; i < cols1; i++) {
        var newRow = [];
        for (var j = 0; j < rows1.length; j++) {
            var cellValue = parseInt(rows1[j].cells[i].innerText);
            newRow.push(cellValue);
        }
        result.push(newRow);
    }

    return result;
}


//КОМПОЗИЦІЯ
function composeTables(tableId1, tableId2) {
    var table1 = document.getElementById(tableId1);
    var table2 = document.getElementById(tableId2);
    var table4 = document.getElementById("table4");

    var table1Array = tableToArray(table1);
    var table2Array = tableToArray(table2);

    var result = calculateComposition(table1Array, table2Array);
    fillTableFromResult(table4, result);
}

function calculateComposition(table1, table2) {
    var result = [];
    for (var i = 0; i < table1.length; i++) {
        var newRow = [];
        for (var j = 0; j < table2[0].length; j++) {
            var value = 0;
            for (var k = 0; k < table1[0].length; k++) {
                value = value || (table1[i][k] && table2[k][j]);
            }
            newRow.push(value);
        }
        result.push(newRow);
    }
    return result;
}


function tableToArray(table) {
    var rows = table.rows;
    var result = [];

    for (var i = 0; i < rows.length; i++) {
        var newRow = [];
        for (var j = 0; j < rows[i].cells.length; j++) {
            var cellValue = parseInt(rows[i].cells[j].innerText);
            newRow.push(cellValue);
        }
        result.push(newRow);
    }

    return result;
}

function IsReflexive(matrix) {
    for (var i = 0; i < matrix.length; i++) {
        if (matrix[i][i] !== 1) {
            return false;
        }
    }
    return true;
}
function checkReflexive(tableId) {
    var table = document.getElementById(tableId);
    var matrix = tableToArray(table);
    var isReflexive = IsReflexive(matrix);

    var resultMessage = isReflexive ? "Матриця є рефлексивною." : "Матриця не є рефлексивною";

    alert(resultMessage);
}

function IsAntiReflexive(matrix) {
    for (var i = 0; i < matrix.length; i++) {
        if (matrix[i][i] !== 0) {
            return false;
        }
    }
    return true;
}
function checkAntiReflexive(tableId) {
    var table = document.getElementById(tableId);
    var matrix = tableToArray(table);
    var isAntiReflexive = IsAntiReflexive(matrix);

    var resultMessage = isAntiReflexive ? "Матриця є антирефлексивною." : "Матриця не є антирефлексивною.";

    alert(resultMessage);
}




function IsSymmetric(matrix) {
    for (var i = 0; i < matrix.length; i++) {
        for (var j = 0; j < matrix.length; j++) {
            if (matrix[i][j] !== matrix[j][i]) {
                return false;
            }
        }
    }
    return true;
}

function checkSymmetric(tableId) {
    var table = document.getElementById(tableId);
    var matrix = tableToArray(table);
    var isSymmetric = IsSymmetric(matrix);

    var resultMessage = isSymmetric ? "Матриця є симетричною." : "Матриця не є симетричною.";

    alert(resultMessage);
}


function IsAsymmetric(matrix) {
    for (var i = 0; i < matrix.length; i++) {
        for (var j = 0; j < matrix.length; j++) {
            if (matrix[i][j] && matrix[j][i]) {
                return false;
            }
        }
    }
    return true;
}

function checkAsymmetric(tableId) {
    var table = document.getElementById(tableId);
    var matrix = tableToArray(table);
    var isAsymmetric = IsAsymmetric(matrix);

    var resultMessage = isAsymmetric ? "Матриця є асиметричною." : "Матриця не є асиметричною.";

    alert(resultMessage);
}

function IsAntisymmetric(matrix) {
    for (var i = 0; i < matrix.length; i++) {
        for (var j = 0; j < matrix[i].length; j++) {
            if (i !== j && matrix[i][j] === 1 && matrix[j][i] === 0) {
                return false;
            }
        }
    }

    return true;
}

function checkAntisymmetric(tableId) {
    var table = document.getElementById(tableId);
    var matrix = tableToArray(table);
    var isAntisymmetric = IsAntisymmetric(matrix);

    var resultMessage = isAntisymmetric ? "Матриця є антисиметричною." : "Матриця не є антисиметричною.";
    alert(resultMessage);
}

function IsTransitive(matrix) {
    for (var i = 0; i < matrix.length; i++) {
        for (var j = 0; j < matrix.length; j++) {
            for (var k = 0; k < matrix.length; k++) {
                if (matrix[i][j] && matrix[j][k] && !matrix[i][k]) {
                    return false;
                }
            }
        }
    }
    return true;
}

function checkTransitive(tableId) {
    var table = document.getElementById(tableId);
    var matrix = tableToArray(table);
    var isTransitive = IsTransitive(matrix);

    var resultMessage = isTransitive ? "Матриця є транзитивною." : "Матриця не є транзитивною.";

    alert(resultMessage);
}

function TransitiveClosure(tableId1) {
    var table1 = document.getElementById(tableId1);
    var table4 = document.getElementById("table4");

    var newSize = parseInt(document.getElementById("matrixSize").value);

    var rows1 = table1.rows;
    var cols1 = rows1[0].cells.length;

    var result = [];

    for (var i = 0; i < newSize; i++) {
        var newRow = [];
        for (var j = 0; j < newSize; j++) {
            var value = 0;
            if (i < rows1.length && j < cols1) {
                var cell = rows1[i].cells[j];
                value = parseInt(cell.innerText);
            }
            newRow.push(value);
        }
        result.push(newRow);
    }

    table4.innerHTML = '';

    var changed;
    do {
        changed = false;
        for (var i = 0; i < newSize; i++) {
            for (var j = 0; j < newSize; j++) {
                if (result[i][j] === 1) {
                    for (var k = 0; k < newSize; k++) {
                        if (result[j][k] === 1 && result[i][k] !== 1) {
                            result[i][k] = 1;
                            changed = true;
                        }
                    }
                }
            }
        }
    } while (changed);

    for (var i = 0; i < result.length; i++) {
        var newRow = table4.insertRow();
        for (var j = 0; j < result[i].length; j++) {
            var newCell = newRow.insertCell();
            newCell.innerText = result[i][j];
        }
    }
}


function IsAcyclic(matrix) {
    for (var i = 0; i < matrix.length; i++) {
        if (matrix[i][i] === 1) {
            return false;
        }
    }

    for (var k = 0; k < matrix.length; k++) {
        for (var i = 0; i < matrix.length; i++) {
            for (var j = 0; j < matrix.length; j++) {
                if (matrix[i][k] === 1 && matrix[k][j] === 1 && matrix[j][i] === 1) {
                    return false;
                }
            }
        }
    }

    return true;
}

function checkAcyclic(tableId) {
    var table = document.getElementById(tableId);
    var matrix = tableToArray(table);
    var isAcyclic = IsAcyclic(matrix);

    var resultMessage = isAcyclic ? "Матриця є ациклічною." : "Матриця не є ациклічною.";
    alert(resultMessage);
}


function IsConnected(matrix) {
    var numRows = matrix.length;
    var numCols = matrix[0].length;

    for (var i = 0; i < numRows; i++) {
        for (var j = 0; j < numCols; j++) {
            if (i !== j && matrix[i][j] !== 1 && matrix[j][i] !== 1) {
                return false;
            }
        }
    }

    return true;
}

function checkConnected(tableId) {
    var table = document.getElementById(tableId);
    var matrix = tableToArray(table);
    var isConnected = IsConnected(matrix);

    var resultMessage = isConnected ? "Граф зв'язний." : "Граф не зв'язний.";
    alert(resultMessage);
}


function IsTolerant(matrix) {
    if (!IsReflexive(matrix)) {
        return false;
    }

    if (!IsSymmetric(matrix)) {
        return false;
    }

    return true;
}

function checkTolerant(tableId) {
    var table = document.getElementById(tableId);
    var matrix = tableToArray(table);
    var isTolerant = IsTolerant(matrix);

    var resultMessage = isTolerant ? "Матриця є толерантною." : "Матриця не є толерантною.";
    alert(resultMessage);
}


function IsEquivalence(matrix) {
    if (!IsReflexive(matrix)) {
        return false;
    }

    if (!IsSymmetric(matrix)) {
        return false;
    }

    if (!IsTransitive(matrix)) {
        return false;
    }

    return true;
}

function checkEquivalence(tableId) {
    var table = document.getElementById(tableId);
    var matrix = tableToArray(table);
    var isEquivalence = IsEquivalence(matrix);

    var resultMessage = isEquivalence ? "Матриця є відношенням еквівалентності." : "Матриця не є відношенням еквівалентності.";
    alert(resultMessage);
}



function IsQuasiOrder(matrix) {
    if (!IsReflexive(matrix)) {
        return false;
    }

    if (!IsTransitive(matrix)) {
        return false;
    }

    return true;
}

function checkQuasiOrder(tableId) {
    var table = document.getElementById(tableId);
    var matrix = tableToArray(table);
    var isQuasiOrder = IsQuasiOrder(matrix);

    var resultMessage = isQuasiOrder ? "Матриця є квазіпорядком." : "Матриця не є квазіпорядком.";
    alert(resultMessage);
}



function IsOrder(matrix) {
    if (!IsReflexive(matrix)) {
        return false;
    }

    if (!IsAntisymmetric(matrix)) {
        return false;
    }

    if (!IsTransitive(matrix)) {
        return false;
    }

    return true;
}

function checkOrder(tableId) {
    var table = document.getElementById(tableId);
    var matrix = tableToArray(table);
    var isOrder = IsOrder(matrix);

    var resultMessage = isOrder ? "Матриця є відношенням порядку." : "Матриця не є відношенням порядку.";
    alert(resultMessage);
}

function Reachability(matrix1, resultMatrix, newSize) {
    for (var i = 0; i < newSize; i++) {
        for (var j = 0; j < newSize; j++) {
            resultMatrix[i][j] = i < matrix1.length && j < matrix1[0].length ? matrix1[i][j] : 0;
        }
    }

    var changed;
    do {
        changed = false;
        for (var k = 0; k < newSize; k++) {
            for (var i = 0; i < newSize; i++) {
                for (var j = 0; j < newSize; j++) {
                    if (resultMatrix[i][k] === 1 && resultMatrix[k][j] === 1 && resultMatrix[i][j] !== 1) {
                        resultMatrix[i][j] = 1;
                        changed = true;
                    }
                }
            }
        }
    } while (changed);

    return resultMatrix;
}

function computeReachability(tableId1) {
    var table1 = document.getElementById(tableId1);
    var table4 = document.getElementById("table4");
    var newSize = parseInt(document.getElementById("matrixSize").value);

    var rows1 = table1.rows;
    var cols1 = rows1[0].cells.length;

    var matrix1 = [];

    for (var i = 0; i < newSize; i++) {
        var newRow = [];
        for (var j = 0; j < newSize; j++) {
            var value = 0;
            if (i < rows1.length && j < cols1) {
                var cell = rows1[i].cells[j];
                value = parseInt(cell.innerText);
            }
            newRow.push(value);
        }
        matrix1.push(newRow);
    }

    var resultMatrix = [];
    for (var i = 0; i < newSize; i++) {
        resultMatrix.push(Array(newSize).fill(0));
    }

    resultMatrix = Reachability(matrix1, resultMatrix, newSize);

    table4.innerHTML = '';

    for (var i = 0; i < resultMatrix.length; i++) {
        var newRow = table4.insertRow();
        for (var j = 0; j < resultMatrix[i].length; j++) {
            var newCell = newRow.insertCell();
            newCell.innerText = resultMatrix[i][j];
        }
    }
}


function MutualReachability(tableId1) {
    var table1 = document.getElementById(tableId1);
    var table4 = document.getElementById("table4");

    var newSize = parseInt(document.getElementById("matrixSize").value);

    var rows1 = table1.rows;
    var cols1 = rows1[0].cells.length;

    var reachabilityMatrix = [];

    for (var i = 0; i < newSize; i++) {
        var newRow = [];
        for (var j = 0; j < newSize; j++) {
            var value = 0;
            if (i < rows1.length && j < cols1) {
                var cell = rows1[i].cells[j];
                value = parseInt(cell.innerText);
            }
            newRow.push(value);
        }
        reachabilityMatrix.push(newRow);
    }

    for (var k = 0; k < newSize; k++) {
        for (var i = 0; i < newSize; i++) {
            for (var j = 0; j < newSize; j++) {
                if (reachabilityMatrix[i][k] === 1 && reachabilityMatrix[k][j] === 1) {
                    reachabilityMatrix[i][j] = 1;
                }
            }
        }
    }

    var transposedReachabilityMatrix = [];
    for (var i = 0; i < newSize; i++) {
        var newRow = [];
        for (var j = 0; j < newSize; j++) {
            newRow.push(reachabilityMatrix[j][i]);
        }
        transposedReachabilityMatrix.push(newRow);
    }

    var resultMatrix = [];
    for (var i = 0; i < newSize; i++) {
        var newRow = [];
        for (var j = 0; j < newSize; j++) {
            newRow.push(reachabilityMatrix[i][j] & transposedReachabilityMatrix[i][j]);
        }
        resultMatrix.push(newRow);
    }

    table4.innerHTML = '';
    for (var i = 0; i < resultMatrix.length; i++) {
        var newRow = table4.insertRow();
        for (var j = 0; j < resultMatrix[i].length; j++) {
            var newCell = newRow.insertCell();
            newCell.innerText = resultMatrix[i][j];
        }
    }
}

function SymmetricComponent(tableId1) {
    var table1 = document.getElementById(tableId1);
    var table4 = document.getElementById("table4");

    var rows1 = table1.rows;
    var cols1 = rows1[0].cells.length;

    var matrix = [];
    for (var i = 0; i < rows1.length; i++) {
        var newRow = [];
        for (var j = 0; j < cols1; j++) {
            var cell = rows1[i].cells[j];
            var value = parseInt(cell.innerText);
            newRow.push(value);
        }
        matrix.push(newRow);
    }

    var numRows = matrix.length;
    var numCols = matrix[0].length;

    var transposedMatrix = [];
    for (var i = 0; i < numCols; i++) {
        var newRow = [];
        for (var j = 0; j < numRows; j++) {
            newRow.push(matrix[j][i]);
        }
        transposedMatrix.push(newRow);
    }

    var resultMatrix = [];
    for (var i = 0; i < numRows; i++) {
        var newRow = [];
        for (var j = 0; j < numCols; j++) {
            newRow.push(matrix[i][j] & transposedMatrix[i][j]);
        }
        resultMatrix.push(newRow);
    }

    table4.innerHTML = '';

    for (var i = 0; i < resultMatrix.length; i++) {
        var newRow = table4.insertRow();
        for (var j = 0; j < resultMatrix[i].length; j++) {
            var newCell = newRow.insertCell();
            newCell.innerText = resultMatrix[i][j];
        }
    }
}


function AsymmetricComponent(tableId1) {
    var table1 = document.getElementById(tableId1);
    var table4 = document.getElementById("table4");

    var numRows = table1.rows.length;
    var numCols = table1.rows[0].cells.length;

    var result = [];

    for (var i = 0; i < numRows; i++) {
        var newRow = [];
        for (var j = 0; j < numCols; j++) {
            var value = 0;
            if (i < table1.rows.length && j < numCols) {
                var cell = table1.rows[i].cells[j];
                value = parseInt(cell.innerText);
            }
            newRow.push(value);
        }
        result.push(newRow);
    }

    var resultMatrix = [];

    for (var i = 0; i < numRows; i++) {
        var newRow = [];
        for (var j = 0; j < numCols; j++) {
            newRow.push((result[i][j] === 1 && result[j][i] === 0) ? 1 : 0);
        }
        resultMatrix.push(newRow);
    }

    table4.innerHTML = '';

    for (var i = 0; i < resultMatrix.length; i++) {
        var newRow = table4.insertRow();
        for (var j = 0; j < resultMatrix[i].length; j++) {
            var newCell = newRow.insertCell();
            newCell.innerText = resultMatrix[i][j];
        }
    }
}




//ЗВУЖЕННЯ
   function restrictTables(tableId1) {
    var table1 = document.getElementById(tableId1);
    var table4 = document.getElementById("table4");

    var newSize = parseInt(document.getElementById("matrixSize").value);

    var rows1 = table1.rows;
    var cols1 = rows1[0].cells.length;

    var result = [];

    for (var i = 0; i < newSize; i++) {
        var newRow = [];
        for (var j = 0; j < newSize; j++) {
            var value = 0; 
            if (i < rows1.length && j < cols1) {
                var cell = rows1[i].cells[j];
                value = parseInt(cell.innerText);
            }
            newRow.push(value);
        }
        result.push(newRow);
    }

    table4.innerHTML = '';

    for (var i = 0; i < result.length; i++) {
        var newRow = table4.insertRow();
        for (var j = 0; j < result[i].length; j++) {
            var newCell = newRow.insertCell();
            newCell.innerText = result[i][j];
        }
    }
}




    function fillTableFromResult(table, result) {
        for (var i = 0; i < result.length; i++) {
            var newRow = table.rows[i];
            for (var j = 0; j < result[i].length; j++) {
                var newCell = newRow.cells[j];
                newCell.innerText = result[i][j];
            }
        }
    }

   function attachFunctions() {
    document.getElementById("fillButton").onclick = function () {
        var selectedTableId = getSelectedTableId();
        fillEmpty(selectedTableId);
    };

    document.getElementById("oneButton").onclick = function () {
        var selectedTableId = getSelectedTableId();
        fillOnes(selectedTableId);
    };

    document.getElementById("randomButton").onclick = function () {
        var selectedTableId = getSelectedTableId();
        fillRandom(selectedTableId);
    };

    document.getElementById("diagonalButton").onclick = function () {
        var selectedTableId = getSelectedTableId();
        fillDiagonal(selectedTableId);
    };

    document.getElementById("antiDiagonalButton").onclick = function () {
        var selectedTableId = getSelectedTableId();
        fillAntiDiagonal(selectedTableId);
    };

    document.getElementById("variantButton").onclick = function () {
        var selectedTableId = getSelectedTableId();
        fillVariant(selectedTableId);
    };

    function getSelectedTableId() {
        var checkboxes = document.querySelectorAll('input[type="checkbox"]');
        var selectedTableId = "table1";

        checkboxes.forEach(function(checkbox) {
            if (checkbox.checked) {
                selectedTableId = checkbox.id.replace("checkbox", "table");
            }
        });

        return selectedTableId;
    }
}

attachFunctions();
var checkboxes = document.querySelectorAll('input[type="checkbox"]');

    checkboxes.forEach(function(checkbox) {
        checkbox.addEventListener('change', function() {
            if (this.checked) {
                checkboxes.forEach(function(otherCheckbox) {
                    if (otherCheckbox !== checkbox) {
                        otherCheckbox.checked = false;
                    }
                });
            }
        });
    });

</script>